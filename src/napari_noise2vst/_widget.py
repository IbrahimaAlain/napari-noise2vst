"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
"""
This module defines a Noise2VST denoising widget for Napari,
including automatic download and loading of pretrained models.
"""

import sys
import os
import torch
import numpy as np
import urllib.request
from pathlib import Path
from qtpy.QtWidgets import QPushButton
from magicgui.widgets import Container, create_widget, FileEdit
from skimage.util import img_as_float

# Configuration du chemin vers le module noise2vst
repo_path = os.path.join(os.path.dirname(__file__), "noise2vst")
if repo_path not in sys.path:
    sys.path.insert(0, repo_path)

# Imports du modèle et des utilitaires
from noise2vst.models.noise2vst import Noise2VST
from noise2vst.models.ffdnet import FFDNet
from noise2vst.models.drunet import DRUNet
from noise2vst.utilities.utilities import f_GAT, f_GAT_inv

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    import napari


class Noise2VSTWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.model = Noise2VST().to(self.device)

        # Widgets
        self.image_input = create_widget(label="Input Image", annotation="napari.layers.Image")
        self.spline_weights_path = FileEdit(label="Load weights (.pth)", mode="r", filter="*.pth")
        self.save_weights_path = FileEdit(label="Save weights to", mode="w", filter="*.pth")
        self.train_button = QPushButton("Train")
        self.eval_button = QPushButton("Evaluate")

        # Callbacks
        self.train_button.clicked.connect(self.train_model)
        self.eval_button.clicked.connect(self.evaluate_model)

        # Assemble widget
        self.extend([
            self.image_input,
            self.spline_weights_path,
            self.save_weights_path,
            self.train_button,
            self.eval_button,
        ])

    def _info(self, msg):
        print(f"[INFO] {msg}")

    def _error(self, msg):
        print(f"[ERROR] {msg}")

    def _get_image_data(self):
        img_layer = self.image_input.value
        if img_layer is None:
            self._error("No image selected.")
            return None
        return img_as_float(img_layer.data)

    def download_weights(self):
        weights_dir = Path(repo_path) / "pretrained_weights"
        weights_dir.mkdir(exist_ok=True)
        base_url = "https://github.com/cszn/KAIR/releases/download/v1.0/"
        filenames = ["ffdnet_color.pth", "drunet_color.pth"]

        for fname in filenames:
            fpath = weights_dir / fname
            if not fpath.exists():
                self._info(f"Téléchargement de {fname}...")
                try:
                    urllib.request.urlretrieve(base_url + fname, str(fpath))
                    self._info(f"{fname} téléchargé avec succès.")
                except Exception as e:
                    self._error(f"Échec du téléchargement de {fname}: {e}")

    def load_models(self):
        weights_dir = Path(repo_path) / "pretrained_weights"

        ffdnet = FFDNet(color=True).to(self.device).eval()
        drunet = DRUNet(color=True).to(self.device).eval()

        ffdnet.load_state_dict(torch.load(weights_dir / "ffdnet_color.pth", map_location=self.device), strict=True)
        drunet.load_state_dict(torch.load(weights_dir / "drunet_color.pth", map_location=self.device), strict=True)

        return ffdnet, drunet

    def train_model(self):
        image = self._get_image_data()
        if image is None:
            return

        self.download_weights()
        try:
            ffdnet, _ = self.load_models()
        except Exception as e:
            self._error(f"Erreur lors du chargement des modèles : {e}")
            return

        if self.spline_weights_path.value:
            try:
                self.model.load_state_dict(torch.load(self.spline_weights_path.value, map_location=self.device))
                self._info("Spline weights loaded.")
            except Exception as e:
                self._error(f"Could not load weights: {e}")

        try:
            self.model.fit(image, ffdnet, nb_iterations=2000)
            self._info("Training complete.")
        except Exception as e:
            self._error(f"Training failed: {e}")
            return

        if self.save_weights_path.value:
            try:
                torch.save(self.model.state_dict(), self.save_weights_path.value)
                self._info(f"Weights saved to {self.save_weights_path.value}")
            except Exception as e:
                self._error(f"Failed to save weights: {e}")

    def evaluate_model(self):
        image = self._get_image_data()
        if image is None:
            return

        try:
            _, drunet = self.load_models()
        except Exception as e:
            self._error(f"Erreur lors du chargement de DRUNet : {e}")
            return

        try:
            with torch.no_grad():
                output = self.model(image, drunet)
                output = output.cpu().numpy()
        except Exception as e:
            self._error(f"Inference failed: {e}")
            return

        name = self.image_input.value.name + "_denoised"
        if name in self.viewer.layers:
            self.viewer.layers[name].data = output
        else:
            self.viewer.add_image(output, name=name)
